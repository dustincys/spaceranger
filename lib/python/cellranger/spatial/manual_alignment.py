#!/usr/bin/env python
#
# Copyright (c) 2019 10x Genomics, Inc.  All rights reserved.
#
import csv

def read_fiducial_locations_from_alignment(alignment_data):
    """
    Generate an array of fiducial locations (x/y) from the JSON alignment
    file generated by Loupe.
    """
    fiducials = alignment_data['fiducial']
    coordinates = [[float(spot['imageX']), float(spot['imageY'])] for spot in fiducials]
    return coordinates

def read_spot_positions_list_from_alignment(alignment_data):
    """
    Generate an array of spot positions (row, col, y, x) from the JSON
    alignment file generated by Loupe.  Downstream input assumes an integer
    value, so we will round here.
    """
    oligo = alignment_data['oligo']
    coordinates = [[int(spot['row']),
                    int(spot['col']),
                    int(round(spot['imageY'])),
                    int(round(spot['imageX']))] for spot in oligo]
    return coordinates

def read_spot_tissue_mask_from_alignment(alignment_data):
    """
    Generate a binary mask of whether spots were declared in or out of the
    tissue in the alignment file generated by Loupe.
    """
    oligo = alignment_data['oligo']
    tissue_mask = [1 if spot.get('tissue') else 0 for spot in oligo]
    return tissue_mask

def _write_positions_list_from_spot_array(spots, out_path):
    # this assumes we've already put even/odd columns in virtual rows
    # write out to int pixel to be consistent with auto aligner (CR-2601)
    tups = sorted([(spot['row'],
                    spot['col'],
                    int(round(spot['imageY'])),
                    int(round(spot['imageX']))) for spot in spots],
                  key=lambda tup: (tup[0]/2, tup[1]))
    with open(out_path, 'w') as outfile:
        writer = csv.writer(outfile, delimiter=',')
        for tup in tups:
            writer.writerow([str(val) for val in tup])

def write_fiducial_positions_list_from_alignment(alignment_data, fiducial_positions_path):
    """
    Write the array of fiducial positions stored in the alignment file into
    a format compatible with the ALIGN_FIDUCIALS_PD fiducial_position_list.
    """
    fiducials = alignment_data['fiducial']
    _write_positions_list_from_spot_array(fiducials, fiducial_positions_path)

def write_spot_positions_list_from_alignment(alignment_data, spot_positions_path):
    """
    Write the array of spot positions stored in the gpr_data file into
    a format compatible with the ALIGN_FIDUCIALS_PD spot_position_list.
    """
    oligos = alignment_data['oligo']
    _write_positions_list_from_spot_array(oligos, spot_positions_path)
